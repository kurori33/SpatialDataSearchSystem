package com.example.demo.dataGenerator;
/**
 * Created by Viechle on 16.12.2016.
 */
public abstract class RandomDataGenerator {

    int dim;  //Dimension
    int count;  //Number of Vectors
    static int id = 1; //Vector ID currently in vector class

    String sqlTable;
    String sqlCopy;



    //optional Parameters
    String tableName;  //Name for Sql Table
    Integer seed;

    Integer paddingLen;   //length of the padding
    String paddingInit;  //The string from which the padding will be generated
    char[] padding_Alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};

    RandVector[] data;  //The actual matrix with the random values

    public RandomDataGenerator(int count, int dim, String tableName, Integer padding, Integer seed){

        this.count = count;
        this.dim = dim;

        if(tableName != null){

            this.tableName = tableName;
        }

        if(padding != null){

            if(padding <= 0 || padding > 10240){

                //Exception
            }else{

                this.paddingLen = padding;
                padding_init();
            }
        }

        if(seed != null){

            this.seed = seed;
        }

        data = new RandVector[count];
    }

    private void padding_init(){

        int pad_len;  //length of the string from which the padding will be generated - not the padding itself
        pad_len = ((paddingLen.intValue() + padding_Alphabet.length)/ padding_Alphabet.length+1) * padding_Alphabet.length;
        paddingInit = "";

        for(int i=0 ; i<pad_len ; i++){

            paddingInit += padding_Alphabet[i%padding_Alphabet.length];
        }
    }


    /*
    * Autogenerated Tablename has the format (dist)(dim)(count)[s(seed)][p(paddingLength)]
    * dist is the distribution which can be added only after the child class is instantiated
    * */
    protected void generateSqlTable(String dist){

        String tableName = dist;
        if(this.tableName != null){

            tableName = this.tableName;
        }else{

            //autogenerate Tablename
            tableName += Integer.toString(this.dim) + Integer.toString(this.count);
            if(this.seed != null){

                tableName += this.seed.intValue();
            }
            if(this.paddingLen != null){

                tableName += this.paddingLen.intValue();
                this.tableName = tableName;  //Set the class tableName to the autogenerated version
            }
        }
        //generate Query
        this.sqlTable = "DROP TABLE IF EXISTS " + "\"" + tableName + "\";\n";
        this.sqlTable += "CREATE TABLE " + "\"" + tableName + "\" (";

        this.sqlTable += "id INT, ";  //id here not optional

        for(int i=1 ; i<=dim ; i++){

            this.sqlTable += (i>1 ? ", " : "") + "d" + Integer.toString(i) + " FLOAT";
        }
        if(paddingLen != null){

            String padLen = Integer.toString(paddingLen);
            this.sqlTable += ", pad" + padLen + " VARCHAR(" + padLen + ")";
        }
        this.sqlTable += ");\n";

        //System.out.println(this.sqlTable);
    }

    protected void generateSqlCopy(){

        this.sqlCopy = "COPY \"" + this.tableName + "\" (";
        this.sqlCopy += "id, ";
        for(int i=1 ; i<=dim ; i++){

            this.sqlCopy += (i>1 ? ", " : "") + "d" + Integer.toString(i);
        }
        if(paddingLen != null){

            String padLen = Integer.toString(paddingLen);
            this.sqlCopy += ", pad" + padLen;
        }
        this.sqlCopy += ") FROM STDIN DELIMITERS ',' CSV QUOTE '''';\n";

    }

    /*
    * Get the Vector id for the constructor of the vector and then increment it
    * Note: This method is meant to be called only ONCE per Vector (in the constructor)
    */
    public static int getNextVectorId(){

        return id++;
    }

    void output_vector(){

        //sql query
        System.out.println(this.sqlTable);

        //sql copy
        System.out.println(this.sqlCopy);


        for(int i=0 ; i<data.length ; i++){

            System.out.print(Integer.toString(data[i].id)+", ");  //Add the ID
            int j;
            for(j = 0 ; j < data[i].values.length-1 ; j++){

                System.out.print(String.format("%5.10e", data[i].values[j]) + "| ");
            }
            System.out.print(String.format("%5.10e", data[i].values[j]));
            if(paddingLen != null){

                System.out.print(" " + data[i].padding);
            }
            System.out.println();
        }

    }
   
    public RandVector[] getRandVector(){
    	return data;
    }
    
    abstract void generateMatrix();
}





























